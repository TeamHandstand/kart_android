import java.util.Date;
import java.util.List;

CREATE TABLE race (
    id TEXT NOT NULL PRIMARY KEY,
    courseId TEXT,
    deletedAt INTEGER as Date,
    endTime INTEGER as Date,
    eventId TEXT,
    funQuestion TEXT,
    name TEXT,
    openSpots INTEGER DEFAULT 20,
    raceOrder INTEGER DEFAULT 0,
    replayUrl TEXT,
    shortAnswer1 TEXT,
    shortAnswer2 TEXT,
    slug TEXT,
    startTime INTEGER as Date,
    totalLaps INTEGER DEFAULT 0,
    updatedAt INTEGER as Date,
    videoUrl TEXT
);

select_all:
SELECT *
FROM race;

select_for_event_id:
SELECT *
FROM race
WHERE eventId=?
ORDER BY raceOrder ASC;

select_for_id:
SELECT *
FROM race
WHERE id=?
LIMIT 1;

select_course_from_race:
SELECT * FROM course
WHERE id=(SELECT courseId FROM race WHERE id=?);

race_with_course_view:
CREATE VIEW IF NOT EXISTS raceWithCourse AS
SELECT
r.*,
c.*,
coalesce(GROUP_CONCAT(u.id), 'empty') as registrantIds,
coalesce(GROUP_CONCAT(u.imageUrl), 'empty') as registrantImageUrls
FROM race r
LEFT OUTER JOIN course c
    ON r.courseId=c.id
LEFT OUTER JOIN user u
    ON u.raceId=r.id
WHERE r.courseId = c.id
GROUP BY r.id
ORDER BY r.raceOrder ASC;

select_races_with_course:
SELECT * FROM raceWithCourse
WHERE eventId=?;
